//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SEEDSRemote.ServerManager {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerInstance", Namespace="http://schemas.datacontract.org/2004/07/SEEDS")]
    [System.SerializableAttribute()]
    public partial class ServerInstance : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServerManager.IServerManager")]
    public interface IServerManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerManager/GetServerInstances", ReplyAction="http://tempuri.org/IServerManager/GetServerInstancesResponse")]
        SEEDSRemote.ServerManager.ServerInstance[] GetServerInstances();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerManager/GetServerInstances", ReplyAction="http://tempuri.org/IServerManager/GetServerInstancesResponse")]
        System.Threading.Tasks.Task<SEEDSRemote.ServerManager.ServerInstance[]> GetServerInstancesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerManager/StartServer", ReplyAction="http://tempuri.org/IServerManager/StartServerResponse")]
        void StartServer(string saveFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerManager/StartServer", ReplyAction="http://tempuri.org/IServerManager/StartServerResponse")]
        System.Threading.Tasks.Task StartServerAsync(string saveFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerManager/StopServer", ReplyAction="http://tempuri.org/IServerManager/StopServerResponse")]
        void StopServer(SEEDSRemote.ServerManager.ServerInstance server);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerManager/StopServer", ReplyAction="http://tempuri.org/IServerManager/StopServerResponse")]
        System.Threading.Tasks.Task StopServerAsync(SEEDSRemote.ServerManager.ServerInstance server);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerManager/StopAllServers", ReplyAction="http://tempuri.org/IServerManager/StopAllServersResponse")]
        void StopAllServers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerManager/StopAllServers", ReplyAction="http://tempuri.org/IServerManager/StopAllServersResponse")]
        System.Threading.Tasks.Task StopAllServersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServerManagerChannel : SEEDSRemote.ServerManager.IServerManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServerManagerClient : System.ServiceModel.ClientBase<SEEDSRemote.ServerManager.IServerManager>, SEEDSRemote.ServerManager.IServerManager {
        
        public ServerManagerClient() {
        }
        
        public ServerManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServerManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public SEEDSRemote.ServerManager.ServerInstance[] GetServerInstances() {
            return base.Channel.GetServerInstances();
        }
        
        public System.Threading.Tasks.Task<SEEDSRemote.ServerManager.ServerInstance[]> GetServerInstancesAsync() {
            return base.Channel.GetServerInstancesAsync();
        }
        
        public void StartServer(string saveFile) {
            base.Channel.StartServer(saveFile);
        }
        
        public System.Threading.Tasks.Task StartServerAsync(string saveFile) {
            return base.Channel.StartServerAsync(saveFile);
        }
        
        public void StopServer(SEEDSRemote.ServerManager.ServerInstance server) {
            base.Channel.StopServer(server);
        }
        
        public System.Threading.Tasks.Task StopServerAsync(SEEDSRemote.ServerManager.ServerInstance server) {
            return base.Channel.StopServerAsync(server);
        }
        
        public void StopAllServers() {
            base.Channel.StopAllServers();
        }
        
        public System.Threading.Tasks.Task StopAllServersAsync() {
            return base.Channel.StopAllServersAsync();
        }
    }
}
